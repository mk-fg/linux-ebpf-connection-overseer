#!/usr/bin/env python

# Relevant docs:
#  https://docs.ebpf.io/ebpf-library/libbpf/userspace/
#  https://libbpf.readthedocs.io/en/latest/api.html

import ctypes as ct, socket as so, ipaddress as ip, pathlib as pl
import os, sys, re, struct, errno, time, json, signal, select


class adict(dict):
	def __init__(self, *args, **kws):
		super().__init__(*args, **kws)
		self.__dict__ = self

def openat2(p, mode='r', _cache=[]):
	'More flexible open() that avoids symlink-related race-conditions'
	# Also allows to open for writing without O_CREAT.
	# Way to validate opened path without disallowing symlinks entirely:
	#  p = realpath(path); validate_is_acceptable(p); file = openat2(p, no_symlinks)
	# As of 2022-10-13 glibc has no openat2() wrapper yet, hence syscall here.
	if not _cache:
		def _openat2(p, flags, _syscall=ct.CDLL(None, use_errno=True).syscall):
			args = ct.create_string_buffer(struct.pack(
				'@QQQ', flags | os.O_NOFOLLOW, 0, res_no_symlinks := 0x04 ))
			fd = _syscall(437, -100, str(p).encode(), args, 24)
			if fd < 0: raise OSError(err := ct.get_errno(), os.strerror(err))
			return fd
		_cache.append(_openat2)
	flags = 0
	if 'r' in mode: flags |= os.O_RDONLY
	if 'w' in mode: assert not flags; flags |= os.O_WRONLY
	if '+' in mode: assert not flags; flags |= os.O_RDWR
	if 'c' in mode: flags |= os.O_CREAT
	if 'x' in mode: flags |= os.O_EXCL
	if 't' in mode: flags |= os.O_TRUNC
	if 'a' in mode: flags |= os.O_APPEND
	mode = mode.translate(dict.fromkeys(ord(c) for c in 'ct'))
	return open(_cache[0](p, flags | os.O_CLOEXEC), mode)

p = lambda *a,**kw: print(*a, **kw, flush=True)
p_err = lambda *a,**kw: print(*a, **kw, file=sys.stderr, flush=True) or 1
err_fmt = lambda err: f'[{err.__class__.__name__}] {err}'


class BPFError(Exception): pass

class BPFMap:

	class _rb_struct(ct.Structure): pass
	class _map_info(ct.Structure): _align_, _fields_ = 8, list( (k, ct.c_uint)
		for k in 'type id key value entires flags'.split() ) + [('name', ct.c_char * 16)]
	class _map_batch_opts(ct.Structure): _fields_ = [
		('sz', ct.c_size_t), ('elem_flags', ct.c_ulonglong), ('flags', ct.c_ulonglong) ]
	_rb_handler_t = ct.CFUNCTYPE(ct.c_int, ct.c_void_p, ct.c_void_p, ct.c_size_t)

	_libbpf = None # needed for ringbuf_process_ring asm to process data
	@classmethod
	def libbpf_init(self):
		if BPFMap._libbpf: return
		lib = BPFMap._libbpf = ct.CDLL('libbpf.so.1', use_errno=True)
		ptr, cint, cuint, cvoid = ct.POINTER, ct.c_int, ct.c_uint, ct.c_void_p
		lib.ring_buffer__new.argtypes = cint, self._rb_handler_t, cvoid, cvoid
		lib.ring_buffer__new.restype = ptr(self._rb_struct)
		lib.ring_buffer__poll.argtypes = ptr(self._rb_struct), cint
		lib.bpf_map_get_info_by_fd.argtypes = cint, ptr(self._map_info), ptr(cuint)
		lib.bpf_map_lookup_batch.argtypes = ( cint,
			cvoid, cvoid, cvoid, cvoid, ptr(cuint), ptr(self._map_batch_opts) )

	fd = fd_close = None
	def map_fd(self, fd=None, path=None):
		if self.fd is not None: return self.fd
		if fd is None:
			if not path: raise ValueError('Either bpf-map fd or path must be specified')
			if (fd := self._libbpf.bpf_obj_get(str(path).encode())) < 0:
				raise BPFError(f'Failed bpf-map init from path for [ {path} ]')
			self.fd_close = True
		self.fd = fd; return fd

	def ev_parse( self, ev, o=0,
			_st=struct.Struct('<BQ16s16sHHII16s'), _ct_proto='tcp udp x'.split(),
			_fields='ct ns saddr daddr sport dport pid uid comm'.split(),
			_ct_af=((so.AddressFamily.AF_INET6, 16), (so.AddressFamily.AF_INET, 4)) ):
		ev = adict(zip(_fields, _st.unpack_from(ev, offset=o)))
		if not ev.ct: return
		ev.proto, (ev.af, n) = _ct_proto[(ev.ct-1)//2], _ct_af[ev.ct%2]
		for k in 'saddr', 'daddr': ev[k] = ip.ip_address(ev[k][:n])
		ev.comm = ev.comm.rstrip(b'\0').decode()
		return ev

	def __enter__(self): return self
	def __exit__(self, *err): self.close()
	def close(self):
		if self.fd_close and self.fd is not None: os.close(self.fd); self.fd = None

class BPFMapRingTable(BPFMap):
	# There's no good high-level API for opening maps from fds,
	#   so using "low-level" api here, which is same thing but with less hassle.
	# Also trivial to use direct syscalls instead, but libbpf is needed for rbs anyway.

	def __init__(self, fd=None, path=None):
		self.libbpf_init()
		self.fd, info_fn = self.map_fd(fd, path), self._libbpf.bpf_map_get_info_by_fd
		info, n = self._map_info(), ct.c_uint(n0 := ct.sizeof(self._map_info))
		if info_fn(self.fd, ct.byref(info), ct.byref(n)) or n.value < n0 or info.key != 4:
			raise BPFError(f'libbpf bpf_map_get_info failed [fd={fd} path={path}]')
		self.name, self.vsz, self.n = info.name.decode(), info.value, info.entires
		self.batch_flags = self._map_batch_opts(sz=ct.sizeof(self._map_batch_opts))

	def read(self, batch=64):
		# Array batches always iterate over all entries, with all keys
		#  always set sequentially, but values are zeroed-out for unused elements.
		# ENOENT shouldn't happen here, but indicates that q goes beyond max_entries.
		vals, a, b = list(), ct.pointer(ct.c_void_p()), ct.pointer(ct.c_void_p())
		q, vb_data = ct.c_uint(), bytearray((vsz := self.vsz) * batch)
		kb, vb = (ct.c_uint*batch)(), ct.c_char.from_buffer(vb_data)
		kb_p, vb_p, q_p = (ct.pointer(v) for v in [kb, vb, q])
		while c := self.n - len(vals):
			c = q.value = min(batch, c)
			if err := self._libbpf.bpf_map_lookup_batch( self.fd,
					None if not vals else a, b, kb_p, vb_p, q_p, self.batch_flags ):
				if -err != errno.ENOENT: raise BPFError('bpf_map_lookup_batch failed')
			for n in range(q.value):
				if not (ev := self.ev_parse(vb_data, n*vsz)): return vals
				vals.append(ev)
			if err or q.value < c: break
			a, b = b, a
		return vals

class BPFMapRingBuffer(BPFMap):

	def __init__(self, fd=None, path=None):
		self.libbpf_init()
		self.updates, self.handler = list(), self._rb_handler_t(self._ev_handler)
		self.rb = self._libbpf.ring_buffer__new(self.map_fd(fd, path), self.handler, None, None)
		if not self.rb: raise BPFError(f'libbpf ring_buffer__new failed [fd={fd} path={path}]')

	def close(self):
		if self.rb: self._libbpf.ring_buffer__free(self.rb); self.rb = None
		super().close()

	def _ev_handler(self, ctx, ev, n):
		return self.updates.append(self.ev_parse(
			bytes((ct.c_char*n).from_address(ev)) )) or 0

	def wait(self, timeout=1.0):
		self.updates.clear()
		if self._libbpf.ring_buffer__poll(
			self.rb, int(timeout*1000) ) <= 0: return () # timeout/error
		return tuple(self.updates)


def stream_events(table, rb, dst, replay_limit=None):
	def _dst_write(ev, ts, ns):
		ev.saddr, ev.daddr = str(ev.saddr), str(ev.daddr)
		ev.ts = ts - (ns - ev.ns) / 1_000_000_000
		try: dst.write(json.dumps(ev)); dst.write('\n'); dst.flush()
		except BrokenPipeError: # pipe closed
			if dst is sys.stdout: os.dup2(os.open(
				os.devnull, os.O_WRONLY ), dst.fileno())
			return True
	with select.epoll(sizehint=2) as poll:
		ns_table, ns_cutoff, ts, ns = 0, 0, time.time(), time.monotonic_ns()
		if replay_limit: ns_cutoff = ns - replay_limit * 1_000_000_000
		for ev in sorted(table.read(), key=lambda ev: ev.ns):
			if (ns_table := ev.ns) < ns_cutoff: continue
			if _dst_write(ev, ts, ns): return
		poll.register(dst_fd := dst.fileno(), 0)
		poll.register(rb.fd, select.EPOLLIN)
		while True:
			if not (ev_fds := poll.poll(maxevents=1)): continue
			if ev_fds[0][0] == dst_fd: break # dst pipe closed
			for ev in rb.wait(0.1): # shouldn't actually need to wait
				if ev.ns <= ns_table or ev.ns < ns_cutoff: continue
				if _dst_write(ev, time.time(), time.monotonic_ns()): return
			if not ev_fds[0][1] & select.EPOLLIN: break # rb fd closed

def main(argv=None):
	import argparse, textwrap
	dd = lambda text: re.sub( r' \t+', ' ',
		textwrap.dedent(text).strip('\n') + '\n' ).replace('\t', '  ')
	parser = argparse.ArgumentParser(
		formatter_class=argparse.RawTextHelpFormatter, description=dd('''
			Script to monitor and forward eBPF events to UI components as json-lines.
			By default checks systemd service env vars,
				uses map sockets from there and outputs stream of events to stdout.
			Alternative is to use -p/--pin option to open/use bpffs-pinned maps.
			Streams events from pre-populated conn_table map first and updates after that.
			Replayed old event times are calculated using monotonic clock offset
				from current wall-clock time, so don't take system suspend into account.'''))
	parser.add_argument('-f', '--fifo', metavar='path', help=dd('''
		FIFO path to use to output stream of events instead of stdout.
		Must be pre-existing, will be reused when other side closes it,
			always sending all stored connection table events after re-opening.'''))
	parser.add_argument('-p', '--pin', metavar='path', help=dd('''
		Top-level path under which all eBPF objects are pinned.
		This script will only access objects under "map" subdirectory.
		Typically under /sys/fs/bpf/ mountpoint. Might require privileged access.'''))
	parser.add_argument('-r', '--replay-window', type=float, metavar='seconds',
		help='Ignore pre-buffered events older than specified number of seconds.')
	opts = parser.parse_args(sys.argv[1:] if argv is None else argv)

	if not opts.pin:
		sd_pid, sd_fds = (
			os.environ.get(f'LISTEN_{k}', '') for k in 'PID FDNAMES'.split() )
		if not sd_pid.isdigit() or int(sd_pid) != os.getpid():
			parser.error('systemd env LISTEN_PID does not match this process')
		sd_fds = (
			adict((k[:-4], 3+n) for n, k in enumerate(sd_fds.split(':')) if k.endswith('__v1'))
			if all(re.search(r'__v\d$', k) for k in sd_fds.split(':')) # versioned fds
			else adict((k, 3 + n) for n, k in enumerate(sd_fds.split(':'))) )
		bpf_rb = BPFMapRingBuffer(sd_fds.updates)
		bpf_table = BPFMapRingTable(sd_fds.conn_table)
		if sd_sock := os.environ.get('NOTIFY_SOCKET'):
			if sd_sock[0] not in ('/', '@'): parser.error('Unsupported sd_notify socket')
			if sd_sock[0] == '@': sd_sock = '\0' + sd_sock[1:]
			with so.socket(so.AF_UNIX, so.SOCK_DGRAM | so.SOCK_CLOEXEC) as s:
				s.connect(sd_sock); s.sendall(b'READY=1')

	else:
		p_maps = pl.Path(opts.pin) / 'maps'
		bpf_rb = BPFMapRingBuffer(path=p_maps / 'updates')
		bpf_table = BPFMapRingTable(path=p_maps / 'conn_table')

	signal.signal(signal.SIGINT, signal.SIG_DFL)
	with bpf_rb as rb, bpf_table as table:
		if not opts.fifo: return stream_events(table, rb, sys.stdout, opts.replay_window)
		while (dst := openat2(opts.fifo, 'w')):
			try: stream_events(table, rb, dst, opts.replay_window)
			finally:
				try: dst.close()
				except BrokenPipeError: pass

if __name__ == '__main__': sys.exit(main())
